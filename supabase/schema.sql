-- Supabase schema for the JS rewrite
create extension if not exists "uuid-ossp";
create extension if not exists pgcrypto;

create table if not exists public.admins (
  id bigint generated by default as identity primary key,
  email text not null unique,
  password_hash text not null,
  full_name text not null,
  role text not null default 'editor',
  last_login_at timestamptz,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists public.events (
  id bigint generated by default as identity primary key,
  title text not null,
  slug text not null unique,
  summary text,
  description text,
  location text,
  starts_at timestamptz not null,
  ends_at timestamptz,
  hero_image_url text,
  is_published boolean not null default false,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists public.media_library (
  id bigint generated by default as identity primary key,
  type text not null check (type in ('gallery', 'testimonial', 'partner')),
  title text,
  description text,
  asset_url text not null,
  metadata jsonb,
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  sender_name text not null,
  sender_email text not null,
  subject text,
  body text not null,
  status text not null default 'new' check (status in ('new', 'read', 'archived')),
  created_at timestamptz not null default timezone('utc', now()),
  updated_at timestamptz not null default timezone('utc', now())
);

create table if not exists public.site_settings (
  id bigint generated by default as identity primary key,
  key text not null unique,
  value jsonb not null,
  updated_at timestamptz not null default timezone('utc', now())
);

create or replace function public.touch_updated_at()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = timezone('utc', now());
  return new;
end;
$$;

create trigger trg_admins_updated_at
before update on public.admins
for each row execute function public.touch_updated_at();

create trigger trg_events_updated_at
before update on public.events
for each row execute function public.touch_updated_at();

create trigger trg_media_updated_at
before update on public.media_library
for each row execute function public.touch_updated_at();

create trigger trg_messages_updated_at
before update on public.messages
for each row execute function public.touch_updated_at();

create trigger trg_settings_updated_at
before update on public.site_settings
for each row execute function public.touch_updated_at();

create or replace function public.verify_admin_credentials(admin_email text, admin_password text)
returns public.admins
language plpgsql
security definer
set search_path = public
as $$
declare
  found_admin public.admins;
begin
  select *
  into found_admin
  from public.admins
  where email = admin_email;

  if found_admin is null then
    raise exception 'ADMIN_NOT_FOUND';
  end if;

  if not public.crypt(admin_password, found_admin.password_hash) = found_admin.password_hash then
    raise exception 'INVALID_PASSWORD';
  end if;

  update public.admins
  set last_login_at = timezone('utc', now())
  where id = found_admin.id;

  return found_admin;
end;
$$;
